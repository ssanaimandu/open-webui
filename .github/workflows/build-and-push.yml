name: Sync Open WebUI Image and Cleanup

on:
  # 6시간마다 주기적으로 실행하여 새 릴리즈가 있는지 확인합니다.
  schedule:
    - cron: '0 */6 * * *'
  # Actions 탭에서 수동으로 워크플로우를 실행할 수 있게 합니다.
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      # 1. Open-WebUI 리포지토리의 최신 릴리즈 태그 가져오기
      - name: Get latest release tag from Open-WebUI
        id: get_tag
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/open-webui/open-webui/releases/latest" | jq -r .tag_name)
          if [ -z "$LATEST_TAG" ]; then
            echo "Failed to fetch latest tag"
            exit 1
          fi
          echo "✅ Latest release tag is ${LATEST_TAG}"
          echo "tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

      # 2. Docker Hub에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker Hub에 이미 동일한 태그가 있는지 확인 (중복 작업 방지)
      - name: Check if Docker image tag already exists
        id: check_image
        run: |
          if docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/open-webui:${{ steps.get_tag.outputs.tag }} >/dev/null; then
            echo "Image tag ${{ steps.get_tag.outputs.tag }} already exists. No action needed."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image tag ${{ steps.get_tag.outputs.tag }} does not exist. Proceeding to pull and push."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # 4. 새 이미지를 Pull, Tag, Push (새 릴리즈가 있을 경우에만 실행)
      - name: Pull, Tag, and Push Docker Image
        if: steps.check_image.outputs.exists == 'false'
        run: |
          echo "🚚 Pulling from ghcr.io..."
          docker pull ghcr.io/open-webui/open-webui:main
          
          echo "🏷️ Tagging images..."
          docker tag ghcr.io/open-webui/open-webui:main ${{ secrets.DOCKERHUB_USERNAME }}/open-webui:${{ steps.get_tag.outputs.tag }}
          docker tag ghcr.io/open-webui/open-webui:main ${{ secrets.DOCKERHUB_USERNAME }}/open-webui:latest
          
          echo "🚀 Pushing to Docker Hub..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/open-webui:${{ steps.get_tag.outputs.tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/open-webui:latest

      # 5. 오래된 Docker Hub 이미지 삭제 (새 이미지를 푸시했을 경우에만 실행)
      - name: Cleanup old Docker Hub images
        if: steps.check_image.outputs.exists == 'false'
        uses: snok/container-retention-policy@v2
        with:
          image-names: ${{ secrets.DOCKERHUB_USERNAME }}/open-webui
          keep-most-recent: 5 # 유지할 최신 이미지 개수
          user: ${{ secrets.DOCKERHUB_USERNAME }}
          token: ${{ secrets.DOCKERHUB_TOKEN }}
          keep-tags: latest # 'latest' 태그는 삭제하지 않음
